#![allow(dead_code)] // TODO: Remove later.
#![allow(non_snake_case)]
extern crate core;

mod consts;
mod field;

#[cfg(test)]
mod tests {
    use ::*;
    use ::field::{Fp751Element, Fp751X2, fpadd751_asm, fpsub751_asm, mul751_asm, rdc751_asm, srdc751_asm, cswap751_asm, cassign751_asm};

    #[test]
    fn fp751add_test() {
        let x: Fp751Element = Fp751Element([17026702066521327207, 5108203422050077993, 10225396685796065916, 11153620995215874678, 6531160855165088358, 15302925148404145445, 1248821577836769963, 9789766903037985294, 7493111552032041328, 10838999828319306046, 18103257655515297935, 27403304611634]);
        let y: Fp751Element = Fp751Element([4227467157325093378, 10699492810770426363, 13500940151395637365, 12966403950118934952, 16517692605450415877, 13647111148905630666, 14223628886152717087, 7167843152346903316, 15855377759596736571, 4300673881383687338, 6635288001920617779, 30486099554235]);
        let z: Fp751Element = Fp751Element([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        
        let result_z : Fp751Element = Fp751Element([2807425150136868969, 15807696232820504357, 5279592763482151665, 5673280871625258015, 4602109386905952620, 10503292223600224496, 15472450463989487051, 16957610055384888610, 4901745237919226283, 15139673709702993385, 6291801583726364098, 57889404165870]);

        unsafe {
            fpadd751_asm(&x, &y, &z);
        }
        
        println!("x: {:?}", x);
        println!("y: {:?}", y);
        println!("z: {:?}", z);

        assert_eq!(z, result_z);
    }

    #[test]
    fn fp751sub_test() {
        let x: Fp751Element = Fp751Element([17026702066521327207, 5108203422050077993, 10225396685796065916, 11153620995215874678, 6531160855165088358, 15302925148404145445, 1248821577836769963, 9789766903037985294, 7493111552032041328, 10838999828319306046, 18103257655515297935, 27403304611634]);
        let y: Fp751Element = Fp751Element([4227467157325093378, 10699492810770426363, 13500940151395637365, 12966403950118934952, 16517692605450415877, 13647111148905630666, 14223628886152717087, 7167843152346903316, 15855377759596736571, 4300673881383687338, 6635288001920617779, 30486099554235]);
        let z: Fp751Element = Fp751Element([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        
        let result_z : Fp751Element = Fp751Element([12799234909196233827, 12855454684989203246, 15171200608109980166, 16633961118806491341, 8460212323424224096, 17607563879644811610, 1425783498632888541, 15676511293190809575, 11281644610628241954, 7314469043429563171, 13496033416057857065, 242983037185455]);
        
        unsafe {
            fpsub751_asm(&x, &y, &z);
        }

        println!("x: {:?}", x);
        println!("y: {:?}", y);
        println!("z: {:?}", z);

        assert_eq!(z, result_z);
    }

    #[test]
    fn mul751_test() {
        let x: Fp751Element = Fp751Element([17026702066521327207, 5108203422050077993, 10225396685796065916, 11153620995215874678, 6531160855165088358, 15302925148404145445, 1248821577836769963, 9789766903037985294, 7493111552032041328, 10838999828319306046, 18103257655515297935, 27403304611634]);
        let y: Fp751Element = Fp751Element([4227467157325093378, 10699492810770426363, 13500940151395637365, 12966403950118934952, 16517692605450415877, 13647111148905630666, 14223628886152717087, 7167843152346903316, 15855377759596736571, 4300673881383687338, 6635288001920617779, 30486099554235]);
        let z: Fp751X2 = Fp751X2([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

        let result_z : Fp751X2 = Fp751X2([11918093859582378702, 13693910278925283406, 2534143186211398833, 14872562756688727181, 13521043268500650576, 12775314744263491649, 10988761003374972922, 17792846320113091562, 8804947074895870507, 17786867968362279744, 14191104393529580986, 16471274703587934482, 10783510407384319316, 3504646249731543697, 11978606881060908790, 16730672368917726982, 4473919814081111882, 7844648497078062277, 11924176903180345829, 13914953863808935540, 17373774813269875783, 13098121647740186041, 652879919675214100, 45288202]);

        unsafe {
            mul751_asm(&x, &y, &z);
        }

        println!("x: {:?}", x);
        println!("y: {:?}", y);
        println!("z: {:?}", z);

        assert_eq!(z, result_z);
    }

    #[test]
    fn rdc751_test() {
        let z: Fp751X2 = Fp751X2([1595347748594595712, 10854920567160033970, 16877102267020034574, 12435724995376660096, 3757940912203224231, 8251999420280413600, 3648859773438820227, 17622716832674727914, 11029567000887241528, 11216190007549447055, 17606662790980286987, 4720707159513626555, 12887743598335030915, 14954645239176589309, 14178817688915225254, 1191346797768989683, 12629157932334713723, 6348851952904485603, 16444232588597434895, 7809979927681678066, 14642637672942531613, 3092657597757640067, 10160361564485285723, 240071237]);
        let rdc_z: Fp751Element = Fp751Element([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        
        let result_z : Fp751Element = Fp751Element([5869906441069043808, 11102887258021574326, 17988893384406749376, 3384077483972554015, 17458359367148659810, 730409164095474479, 1525066913322772123, 9732400781873362512, 12214268875956652736, 6321993393524698692, 379915353855920895, 30719511393857]);

        unsafe {
            rdc751_asm(&z, &rdc_z);
        }

        println!("z: {:?}", z);
        println!("rdc_z: {:?}", rdc_z);

        assert_eq!(rdc_z, result_z);
    }

    #[test]
    fn srdc751_test() {
        let aR : Fp751X2 = Fp751X2([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 140737488355328, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
        let a : Fp751Element = Fp751Element([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);

        let result_rdc : Fp751Element = Fp751Element([2772363909967445152, 8904834995188640916, 14485975372724401867, 5675447482867805976, 6509199818670651619, 17402797052606120887, 7933152194360122979, 13442144921695560026, 2338709700224065948, 14016289530437002321, 15782318157490978665, 53111112938879]);

        unsafe {
            rdc751_asm(&aR, &a);
        }

        println!("aR: {:?}", aR);
        println!("a: {:?}", a);

        //assert_eq!(a, result_rdc);

        let result_srdc : Fp751Element = Fp751Element([2772363909967445152, 8904834995188640916, 14485975372724401867, 5675447482867805976, 6509199818670651619, 17402797052606120887, 7933152194360122979, 13442144921695560026, 2338709700224065948, 14016289530437002321, 15782318157490978665, 53111112938879]);

        unsafe {
            srdc751_asm(&a);
        }

        println!("a(srdc): {:?}", a);

        assert_eq!(a, result_srdc);
    }

    #[test]
    fn cswap751_test() {
        let one : Fp751Element = Fp751Element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
        let two : Fp751Element = Fp751Element([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);

        let x = one;
        let y = two;

        unsafe {
            cswap751_asm(&x, &y, 0);
        }

        println!("x(0): {:?}", x);
        println!("y(0): {:?}", y);
        
        unsafe {
            cswap751_asm(&x, &y, 1);
        }

        println!("x(1): {:?}", x);
        println!("y(1): {:?}", y);
    }

    #[test]
    fn cassign751_test() {
        let one : Fp751Element = Fp751Element([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]);
        let two : Fp751Element = Fp751Element([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]);
        let three : Fp751Element = Fp751Element([3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]);

        unsafe {
            cassign751_asm(&two, &three, &one, 0)
        }

        println!("one(0)  : {:?}", one);
        println!("two(0)  : {:?}", two);
        println!("three(0): {:?}", three);

        unsafe {
            cassign751_asm(&two, &three, &one, 1)
        }

        println!("one(1)  : {:?}", one);
        println!("two(1)  : {:?}", two);
        println!("three(1): {:?}", three);

    }
}
